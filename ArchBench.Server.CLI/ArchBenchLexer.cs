//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\ArchBench.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
//[System.CLSCompliant(false)]
public partial class ArchBenchLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		HELP=1, START=2, STOP=3, INSTALL=4, ENABLE=5, DISABLE=6, WITH=7, SET=8, 
		SHOW=9, EXIT=10, ASSIGNMENT=11, PRIME=12, IDENTIFIER=13, NUMBER=14, PATH=15, 
		NEWLINE=16, WHITESPACE=17;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"HELP", "START", "STOP", "INSTALL", "ENABLE", "DISABLE", "WITH", "SET", 
		"SHOW", "EXIT", "ASSIGNMENT", "PRIME", "IDENTIFIER", "NUMBER", "PATH", 
		"NEWLINE", "WHITESPACE"
	};


	public ArchBenchLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public ArchBenchLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'help'", "'start'", "'stop'", "'install'", "'enable'", "'disable'", 
		"'with'", "'set'", "'show'", "'exit'", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "HELP", "START", "STOP", "INSTALL", "ENABLE", "DISABLE", "WITH", 
		"SET", "SHOW", "EXIT", "ASSIGNMENT", "PRIME", "IDENTIFIER", "NUMBER", 
		"PATH", "NEWLINE", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ArchBench.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ArchBenchLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\x13', '\x88', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', 
		'\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\a', 
		'\xE', '\x66', '\n', '\xE', '\f', '\xE', '\xE', '\xE', 'i', '\v', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x6', '\xE', 'n', '\n', '\xE', 
		'\r', '\xE', '\xE', '\xE', 'o', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', 
		't', '\n', '\xE', '\x3', '\xF', '\x6', '\xF', 'w', '\n', '\xF', '\r', 
		'\xF', '\xE', '\xF', 'x', '\x3', '\x10', '\x6', '\x10', '|', '\n', '\x10', 
		'\r', '\x10', '\xE', '\x10', '}', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x12', '\x6', '\x12', '\x83', '\n', '\x12', '\r', '\x12', '\xE', '\x12', 
		'\x84', '\x3', '\x12', '\x3', '\x12', '\x2', '\x2', '\x13', '\x3', '\x3', 
		'\x5', '\x4', '\a', '\x5', '\t', '\x6', '\v', '\a', '\r', '\b', '\xF', 
		'\t', '\x11', '\n', '\x13', '\v', '\x15', '\f', '\x17', '\r', '\x19', 
		'\xE', '\x1B', '\xF', '\x1D', '\x10', '\x1F', '\x11', '!', '\x12', '#', 
		'\x13', '\x3', '\x2', '\n', '\x3', '\x2', ')', ')', '\x4', '\x2', '\x43', 
		'\\', '\x63', '|', '\a', '\x2', '\x32', ';', '\x41', '\x41', '\x43', '\\', 
		'\x61', '\x61', '\x63', '|', '\b', '\x2', '\"', '\"', '\x32', ';', '\x41', 
		'\x41', '\x43', '\\', '\x61', '\x61', '\x63', '|', '\x3', '\x2', '\x32', 
		';', '\a', '\x2', '\x30', '<', '\x43', '\\', '^', '^', '\x61', '\x61', 
		'\x63', '|', '\x3', '\x2', '\f', '\f', '\x5', '\x2', '\v', '\v', '\xF', 
		'\xF', '\"', '\"', '\x2', '\x8D', '\x2', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x5', '\x3', '\x2', '\x2', '\x2', '\x2', '\a', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\t', '\x3', '\x2', '\x2', '\x2', '\x2', '\v', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\r', '\x3', '\x2', '\x2', '\x2', '\x2', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x11', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\x2', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x17', '\x3', '\x2', '\x2', '\x2', '\x2', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '!', '\x3', '\x2', '\x2', '\x2', '\x2', '#', '\x3', '\x2', 
		'\x2', '\x2', '\x3', '%', '\x3', '\x2', '\x2', '\x2', '\x5', '*', '\x3', 
		'\x2', '\x2', '\x2', '\a', '\x30', '\x3', '\x2', '\x2', '\x2', '\t', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\v', '=', '\x3', '\x2', '\x2', '\x2', '\r', 
		'\x44', '\x3', '\x2', '\x2', '\x2', '\xF', 'L', '\x3', '\x2', '\x2', '\x2', 
		'\x11', 'Q', '\x3', '\x2', '\x2', '\x2', '\x13', 'U', '\x3', '\x2', '\x2', 
		'\x2', '\x15', 'Z', '\x3', '\x2', '\x2', '\x2', '\x17', '_', '\x3', '\x2', 
		'\x2', '\x2', '\x19', '\x61', '\x3', '\x2', '\x2', '\x2', '\x1B', 's', 
		'\x3', '\x2', '\x2', '\x2', '\x1D', 'v', '\x3', '\x2', '\x2', '\x2', '\x1F', 
		'{', '\x3', '\x2', '\x2', '\x2', '!', '\x7F', '\x3', '\x2', '\x2', '\x2', 
		'#', '\x82', '\x3', '\x2', '\x2', '\x2', '%', '&', '\a', 'j', '\x2', '\x2', 
		'&', '\'', '\a', 'g', '\x2', '\x2', '\'', '(', '\a', 'n', '\x2', '\x2', 
		'(', ')', '\a', 'r', '\x2', '\x2', ')', '\x4', '\x3', '\x2', '\x2', '\x2', 
		'*', '+', '\a', 'u', '\x2', '\x2', '+', ',', '\a', 'v', '\x2', '\x2', 
		',', '-', '\a', '\x63', '\x2', '\x2', '-', '.', '\a', 't', '\x2', '\x2', 
		'.', '/', '\a', 'v', '\x2', '\x2', '/', '\x6', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '\x31', '\a', 'u', '\x2', '\x2', '\x31', '\x32', '\a', 'v', '\x2', 
		'\x2', '\x32', '\x33', '\a', 'q', '\x2', '\x2', '\x33', '\x34', '\a', 
		'r', '\x2', '\x2', '\x34', '\b', '\x3', '\x2', '\x2', '\x2', '\x35', '\x36', 
		'\a', 'k', '\x2', '\x2', '\x36', '\x37', '\a', 'p', '\x2', '\x2', '\x37', 
		'\x38', '\a', 'u', '\x2', '\x2', '\x38', '\x39', '\a', 'v', '\x2', '\x2', 
		'\x39', ':', '\a', '\x63', '\x2', '\x2', ':', ';', '\a', 'n', '\x2', '\x2', 
		';', '<', '\a', 'n', '\x2', '\x2', '<', '\n', '\x3', '\x2', '\x2', '\x2', 
		'=', '>', '\a', 'g', '\x2', '\x2', '>', '?', '\a', 'p', '\x2', '\x2', 
		'?', '@', '\a', '\x63', '\x2', '\x2', '@', '\x41', '\a', '\x64', '\x2', 
		'\x2', '\x41', '\x42', '\a', 'n', '\x2', '\x2', '\x42', '\x43', '\a', 
		'g', '\x2', '\x2', '\x43', '\f', '\x3', '\x2', '\x2', '\x2', '\x44', '\x45', 
		'\a', '\x66', '\x2', '\x2', '\x45', '\x46', '\a', 'k', '\x2', '\x2', '\x46', 
		'G', '\a', 'u', '\x2', '\x2', 'G', 'H', '\a', '\x63', '\x2', '\x2', 'H', 
		'I', '\a', '\x64', '\x2', '\x2', 'I', 'J', '\a', 'n', '\x2', '\x2', 'J', 
		'K', '\a', 'g', '\x2', '\x2', 'K', '\xE', '\x3', '\x2', '\x2', '\x2', 
		'L', 'M', '\a', 'y', '\x2', '\x2', 'M', 'N', '\a', 'k', '\x2', '\x2', 
		'N', 'O', '\a', 'v', '\x2', '\x2', 'O', 'P', '\a', 'j', '\x2', '\x2', 
		'P', '\x10', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\a', 'u', '\x2', '\x2', 
		'R', 'S', '\a', 'g', '\x2', '\x2', 'S', 'T', '\a', 'v', '\x2', '\x2', 
		'T', '\x12', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\a', 'u', '\x2', '\x2', 
		'V', 'W', '\a', 'j', '\x2', '\x2', 'W', 'X', '\a', 'q', '\x2', '\x2', 
		'X', 'Y', '\a', 'y', '\x2', '\x2', 'Y', '\x14', '\x3', '\x2', '\x2', '\x2', 
		'Z', '[', '\a', 'g', '\x2', '\x2', '[', '\\', '\a', 'z', '\x2', '\x2', 
		'\\', ']', '\a', 'k', '\x2', '\x2', ']', '^', '\a', 'v', '\x2', '\x2', 
		'^', '\x16', '\x3', '\x2', '\x2', '\x2', '_', '`', '\a', '?', '\x2', '\x2', 
		'`', '\x18', '\x3', '\x2', '\x2', '\x2', '\x61', '\x62', '\t', '\x2', 
		'\x2', '\x2', '\x62', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x63', 'g', 
		'\t', '\x3', '\x2', '\x2', '\x64', '\x66', '\t', '\x4', '\x2', '\x2', 
		'\x65', '\x64', '\x3', '\x2', '\x2', '\x2', '\x66', 'i', '\x3', '\x2', 
		'\x2', '\x2', 'g', '\x65', '\x3', '\x2', '\x2', '\x2', 'g', 'h', '\x3', 
		'\x2', '\x2', '\x2', 'h', 't', '\x3', '\x2', '\x2', '\x2', 'i', 'g', '\x3', 
		'\x2', '\x2', '\x2', 'j', 'k', '\x5', '\x19', '\r', '\x2', 'k', 'm', '\t', 
		'\x3', '\x2', '\x2', 'l', 'n', '\t', '\x5', '\x2', '\x2', 'm', 'l', '\x3', 
		'\x2', '\x2', '\x2', 'n', 'o', '\x3', '\x2', '\x2', '\x2', 'o', 'm', '\x3', 
		'\x2', '\x2', '\x2', 'o', 'p', '\x3', '\x2', '\x2', '\x2', 'p', 'q', '\x3', 
		'\x2', '\x2', '\x2', 'q', 'r', '\x5', '\x19', '\r', '\x2', 'r', 't', '\x3', 
		'\x2', '\x2', '\x2', 's', '\x63', '\x3', '\x2', '\x2', '\x2', 's', 'j', 
		'\x3', '\x2', '\x2', '\x2', 't', '\x1C', '\x3', '\x2', '\x2', '\x2', 'u', 
		'w', '\t', '\x6', '\x2', '\x2', 'v', 'u', '\x3', '\x2', '\x2', '\x2', 
		'w', 'x', '\x3', '\x2', '\x2', '\x2', 'x', 'v', '\x3', '\x2', '\x2', '\x2', 
		'x', 'y', '\x3', '\x2', '\x2', '\x2', 'y', '\x1E', '\x3', '\x2', '\x2', 
		'\x2', 'z', '|', '\t', '\a', '\x2', '\x2', '{', 'z', '\x3', '\x2', '\x2', 
		'\x2', '|', '}', '\x3', '\x2', '\x2', '\x2', '}', '{', '\x3', '\x2', '\x2', 
		'\x2', '}', '~', '\x3', '\x2', '\x2', '\x2', '~', ' ', '\x3', '\x2', '\x2', 
		'\x2', '\x7F', '\x80', '\t', '\b', '\x2', '\x2', '\x80', '\"', '\x3', 
		'\x2', '\x2', '\x2', '\x81', '\x83', '\t', '\t', '\x2', '\x2', '\x82', 
		'\x81', '\x3', '\x2', '\x2', '\x2', '\x83', '\x84', '\x3', '\x2', '\x2', 
		'\x2', '\x84', '\x82', '\x3', '\x2', '\x2', '\x2', '\x84', '\x85', '\x3', 
		'\x2', '\x2', '\x2', '\x85', '\x86', '\x3', '\x2', '\x2', '\x2', '\x86', 
		'\x87', '\b', '\x12', '\x2', '\x2', '\x87', '$', '\x3', '\x2', '\x2', 
		'\x2', '\v', '\x2', '\x65', 'g', 'm', 'o', 's', 'x', '}', '\x84', '\x3', 
		'\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
